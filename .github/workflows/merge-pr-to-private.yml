

name: Sync merged PR to Private Repo

on:
  pull_request:
    types: [closed]

permissions:
  contents: read
  pull-requests: write

jobs:
  sync:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      BASE_REF: ${{ github.event.pull_request.base.ref }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PRIVATE_REPO_OWNER: ${{ vars.PRIVATE_REPO_OWNER }}
      PRIVATE_REPO_NAME: ${{ vars.PRIVATE_REPO_NAME }}
    steps:
      - name: Validate configuration
        run: |
          if [ -z "$PRIVATE_REPO_OWNER" ] || [ -z "$PRIVATE_REPO_NAME" ]; then
            echo "❌ Please set repository variables PRIVATE_REPO_OWNER and PRIVATE_REPO_NAME." >&2
            exit 1
          fi
          if [ -z "${{ secrets.PRIVATE_REPO_PAT }}" ]; then
            echo "❌ Secret PRIVATE_REPO_PAT is not set." >&2
            exit 1
          fi

      - name: Checkout Prod repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity (committer)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add remotes and fetch
        run: |
          set -e
          echo "→ Base ref: ${BASE_REF}"
          echo "→ Head sha: ${HEAD_SHA}"
          # Ensure we know the PR head commit locally (in case it's not on a named branch)
          git fetch origin ${HEAD_SHA}
          # Add private repo remote with PAT
          git remote add private https://x-access-token:${{ secrets.PRIVATE_REPO_PAT }}@github.com/${PRIVATE_REPO_OWNER}/${PRIVATE_REPO_NAME}.git
          git fetch --prune origin
          git fetch --prune private

      - name: Compute commit range
        id: range
        run: |
          set -e
          MERGE_BASE=$(git merge-base origin/${BASE_REF} ${HEAD_SHA})
          echo "→ merge-base: $MERGE_BASE"
          if [ -z "$MERGE_BASE" ]; then
            echo "❌ Could not determine merge-base between origin/${BASE_REF} and ${HEAD_SHA}" >&2
            exit 1
          fi
          COMMITS=$(git rev-list --reverse ${MERGE_BASE}..${HEAD_SHA})
          echo "→ commits to cherry-pick:" && echo "$COMMITS" | nl -ba
          if [ -z "$COMMITS" ]; then
            echo "No new commits to sync." && exit 0
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create local branch from private/${{ env.BASE_REF }}
        if: steps.range.outputs.commits
        run: |
          set -e
          # Create a local working branch based on the private repo base branch
          git checkout -B sync-to-private private/${BASE_REF}

      - name: Cherry-pick PR commits preserving authors
        if: steps.range.outputs.commits
        run: |
          set -e
          CONFLICT=0
          while read -r c; do
            echo "→ cherry-pick $c"
            if ! git cherry-pick -x $c; then
              echo "❌ Conflict while cherry-picking $c" >&2
              git cherry-pick --abort || true
              CONFLICT=1
              break
            fi
          done <<EOF
          ${{ steps.range.outputs.commits }}
EOF
          if [ "$CONFLICT" -ne 0 ]; then
            exit 2
          fi

      - name: Push to private repo base branch
        if: steps.range.outputs.commits
        run: |
          set -e
          git push private HEAD:${BASE_REF}

      - name: Comment on PR (success)
        if: steps.range.outputs.commits && success()
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              '✅ Synced PR commits to private repo.',
              '',
              `• Branch: **${process.env.BASE_REF}**`,
              `• Private Repo: **${process.env.PRIVATE_REPO_OWNER}/${process.env.PRIVATE_REPO_NAME}**`,
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: Comment on PR (conflict)
        if: failure() && steps.range.outputs.commits
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              '⚠️ Sync to private repo failed due to merge conflicts during cherry-pick.',
              'Please resolve manually in the private repo base branch.',
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });